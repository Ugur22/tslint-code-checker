import * as ts from "typescript";
export declare function keyword(node: ts.BreakOrContinueStatement | ts.ThrowStatement | ts.ReturnStatement): ts.Node;
export declare function isAssignment(node: ts.Node | undefined): node is ts.BinaryExpression;
export declare function getIdentifier(node: ts.Node): ts.Identifier | undefined;
export declare function getComments(node: ts.Node): ts.CommentRange[];
export declare function getCommentsBefore(node: ts.Node): ts.CommentRange[];
export declare function getCommentsAfter(node: ts.Node): ts.CommentRange[];
export declare function getText(textRange: ts.TextRange, file: ts.SourceFile): string;
export declare function toTokens(node: ts.Node): ts.Node[];
export declare function lineAndCharacter(pos: number, file: ts.SourceFile): ts.LineAndCharacter;
export declare function is(node: ts.Node | undefined, ...kinds: ts.SyntaxKind[]): boolean;
export declare function localAncestorsChain(node: ts.Node): ts.Node[];
export declare function ancestorsChain(node: ts.Node, ...boundary: ts.SyntaxKind[]): ts.Node[];
export declare function firstLocalAncestor(node: ts.Node, ...targetAncestor: ts.SyntaxKind[]): ts.Node | undefined;
export declare function firstAncestor(node: ts.Node, targetAncestor: ts.SyntaxKind[], ...boundary: ts.SyntaxKind[]): ts.Node | undefined;
export declare function floatToTopParenthesis(node: ts.Node): ts.Node;
export declare function drillDownThroughParenthesis(node: ts.Node): ts.Node;
export declare function descendants(node: ts.Node): ts.Node[];
export declare const FUNCTION_LIKE: ts.SyntaxKind[];
export declare const CONDITIONAL_STATEMENTS: ts.SyntaxKind[];
export declare const LOOP_STATEMENTS: ts.SyntaxKind[];
